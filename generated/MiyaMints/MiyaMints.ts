// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Deployed extends ethereum.Event {
  get params(): Deployed__Params {
    return new Deployed__Params(this);
  }
}

export class Deployed__Params {
  _event: Deployed;

  constructor(event: Deployed) {
    this._event = event;
  }

  get deployer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collection(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get aligned(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get salt(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class ERC721MiyaImplementation extends ethereum.Event {
  get params(): ERC721MiyaImplementation__Params {
    return new ERC721MiyaImplementation__Params(this);
  }
}

export class ERC721MiyaImplementation__Params {
  _event: ERC721MiyaImplementation;

  constructor(event: ERC721MiyaImplementation) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MiyaAVImplementation extends ethereum.Event {
  get params(): MiyaAVImplementation__Params {
    return new MiyaAVImplementation__Params(this);
  }
}

export class MiyaAVImplementation__Params {
  _event: MiyaAVImplementation;

  constructor(event: MiyaAVImplementation) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MiyaIdSet extends ethereum.Event {
  get params(): MiyaIdSet__Params {
    return new MiyaIdSet__Params(this);
  }
}

export class MiyaIdSet__Params {
  _event: MiyaIdSet;

  constructor(event: MiyaIdSet) {
    this._event = event;
  }

  get erc721(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipChanged extends ethereum.Event {
  get params(): OwnershipChanged__Params {
    return new OwnershipChanged__Params(this);
  }
}

export class OwnershipChanged__Params {
  _event: OwnershipChanged;

  constructor(event: OwnershipChanged) {
    this._event = event;
  }

  get erc721m(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipHandoverCanceled extends ethereum.Event {
  get params(): OwnershipHandoverCanceled__Params {
    return new OwnershipHandoverCanceled__Params(this);
  }
}

export class OwnershipHandoverCanceled__Params {
  _event: OwnershipHandoverCanceled;

  constructor(event: OwnershipHandoverCanceled) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipHandoverRequested extends ethereum.Event {
  get params(): OwnershipHandoverRequested__Params {
    return new OwnershipHandoverRequested__Params(this);
  }
}

export class OwnershipHandoverRequested__Params {
  _event: OwnershipHandoverRequested;

  constructor(event: OwnershipHandoverRequested) {
    this._event = event;
  }

  get pendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MiyaMints extends ethereum.SmartContract {
  static bind(address: Address): MiyaMints {
    return new MiyaMints("MiyaMints", address);
  }

  deploy(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _contractURI: string,
    _maxSupply: BigInt,
    _royalty: i32,
    _allocation: i32,
    _owner: Address,
    _alignedNft: Address,
    _price: BigInt,
    _vaultId: BigInt,
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(string,string,string,string,uint40,uint16,uint16,address,address,uint80,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromString(_contractURI),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalty)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_allocation)),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_alignedNft),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
      ],
    );

    return result[0].toAddress();
  }

  try_deploy(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _contractURI: string,
    _maxSupply: BigInt,
    _royalty: i32,
    _allocation: i32,
    _owner: Address,
    _alignedNft: Address,
    _price: BigInt,
    _vaultId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(string,string,string,string,uint40,uint16,uint16,address,address,uint80,uint256):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromString(_contractURI),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalty)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_allocation)),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_alignedNft),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployDeterministic(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _contractURI: string,
    _maxSupply: BigInt,
    _royalty: i32,
    _allocation: i32,
    _owner: Address,
    _alignedNft: Address,
    _price: BigInt,
    _vaultId: BigInt,
    _salt: Bytes,
  ): Address {
    let result = super.call(
      "deployDeterministic",
      "deployDeterministic(string,string,string,string,uint40,uint16,uint16,address,address,uint80,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromString(_contractURI),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalty)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_allocation)),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_alignedNft),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromFixedBytes(_salt),
      ],
    );

    return result[0].toAddress();
  }

  try_deployDeterministic(
    _name: string,
    _symbol: string,
    _baseURI: string,
    _contractURI: string,
    _maxSupply: BigInt,
    _royalty: i32,
    _allocation: i32,
    _owner: Address,
    _alignedNft: Address,
    _price: BigInt,
    _vaultId: BigInt,
    _salt: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployDeterministic",
      "deployDeterministic(string,string,string,string,uint40,uint16,uint16,address,address,uint80,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromString(_baseURI),
        ethereum.Value.fromString(_contractURI),
        ethereum.Value.fromUnsignedBigInt(_maxSupply),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_royalty)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_allocation)),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_alignedNft),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromFixedBytes(_salt),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployVault(_erc721: Address, _vaultId: BigInt): Address {
    let result = super.call(
      "deployVault",
      "deployVault(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_erc721),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
      ],
    );

    return result[0].toAddress();
  }

  try_deployVault(
    _erc721: Address,
    _vaultId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployVault",
      "deployVault(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_erc721),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc721MiyaImplementation(): Address {
    let result = super.call(
      "erc721MiyaImplementation",
      "erc721MiyaImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_erc721MiyaImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc721MiyaImplementation",
      "erc721MiyaImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAlignedNfts(): Array<Address> {
    let result = super.call(
      "getAlignedNfts",
      "getAlignedNfts():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getAlignedNfts(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAlignedNfts",
      "getAlignedNfts():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getVault(_erc721: Address, _vaultId: BigInt): Address {
    let result = super.call("getVault", "getVault(address,uint256):(address)", [
      ethereum.Value.fromAddress(_erc721),
      ethereum.Value.fromUnsignedBigInt(_vaultId),
    ]);

    return result[0].toAddress();
  }

  try_getVault(
    _erc721: Address,
    _vaultId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVault",
      "getVault(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_erc721),
        ethereum.Value.fromUnsignedBigInt(_vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultIds(_erc721: Address): Array<BigInt> {
    let result = super.call("getVaultIds", "getVaultIds(address):(uint256[])", [
      ethereum.Value.fromAddress(_erc721),
    ]);

    return result[0].toBigIntArray();
  }

  try_getVaultIds(_erc721: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVaultIds",
      "getVaultIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_erc721)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  initCodeHash(): Bytes {
    let result = super.call("initCodeHash", "initCodeHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_initCodeHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("initCodeHash", "initCodeHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  miyaAVFactory(): Address {
    let result = super.call("miyaAVFactory", "miyaAVFactory():(address)", []);

    return result[0].toAddress();
  }

  try_miyaAVFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "miyaAVFactory",
      "miyaAVFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  miyaIds(_erc721: Address): BigInt {
    let result = super.call("miyaIds", "miyaIds(address):(uint256)", [
      ethereum.Value.fromAddress(_erc721),
    ]);

    return result[0].toBigInt();
  }

  try_miyaIds(_erc721: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("miyaIds", "miyaIds(address):(uint256)", [
      ethereum.Value.fromAddress(_erc721),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownershipHandoverExpiresAt(pendingOwner: Address): BigInt {
    let result = super.call(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );

    return result[0].toBigInt();
  }

  try_ownershipHandoverExpiresAt(
    pendingOwner: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownershipHandoverExpiresAt",
      "ownershipHandoverExpiresAt(address):(uint256)",
      [ethereum.Value.fromAddress(pendingOwner)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  predictDeterministicAddress(_salt: Bytes): Address {
    let result = super.call(
      "predictDeterministicAddress",
      "predictDeterministicAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_salt)],
    );

    return result[0].toAddress();
  }

  try_predictDeterministicAddress(_salt: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "predictDeterministicAddress",
      "predictDeterministicAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_salt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _erc721MiyaImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _miyaAVImplementation(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AlignMaxLiquidityCall extends ethereum.Call {
  get inputs(): AlignMaxLiquidityCall__Inputs {
    return new AlignMaxLiquidityCall__Inputs(this);
  }

  get outputs(): AlignMaxLiquidityCall__Outputs {
    return new AlignMaxLiquidityCall__Outputs(this);
  }
}

export class AlignMaxLiquidityCall__Inputs {
  _call: AlignMaxLiquidityCall;

  constructor(call: AlignMaxLiquidityCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AlignMaxLiquidityCall__Outputs {
  _call: AlignMaxLiquidityCall;

  constructor(call: AlignMaxLiquidityCall) {
    this._call = call;
  }
}

export class AlignNftsCall extends ethereum.Call {
  get inputs(): AlignNftsCall__Inputs {
    return new AlignNftsCall__Inputs(this);
  }

  get outputs(): AlignNftsCall__Outputs {
    return new AlignNftsCall__Outputs(this);
  }
}

export class AlignNftsCall__Inputs {
  _call: AlignNftsCall;

  constructor(call: AlignNftsCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AlignNftsCall__Outputs {
  _call: AlignNftsCall;

  constructor(call: AlignNftsCall) {
    this._call = call;
  }
}

export class AlignTokensCall extends ethereum.Call {
  get inputs(): AlignTokensCall__Inputs {
    return new AlignTokensCall__Inputs(this);
  }

  get outputs(): AlignTokensCall__Outputs {
    return new AlignTokensCall__Outputs(this);
  }
}

export class AlignTokensCall__Inputs {
  _call: AlignTokensCall;

  constructor(call: AlignTokensCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AlignTokensCall__Outputs {
  _call: AlignTokensCall;

  constructor(call: AlignTokensCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CancelOwnershipHandoverCall__Inputs {
    return new CancelOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CancelOwnershipHandoverCall__Outputs {
    return new CancelOwnershipHandoverCall__Outputs(this);
  }
}

export class CancelOwnershipHandoverCall__Inputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class CancelOwnershipHandoverCall__Outputs {
  _call: CancelOwnershipHandoverCall;

  constructor(call: CancelOwnershipHandoverCall) {
    this._call = call;
  }
}

export class ClaimYieldCall extends ethereum.Call {
  get inputs(): ClaimYieldCall__Inputs {
    return new ClaimYieldCall__Inputs(this);
  }

  get outputs(): ClaimYieldCall__Outputs {
    return new ClaimYieldCall__Outputs(this);
  }
}

export class ClaimYieldCall__Inputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimYieldCall__Outputs {
  _call: ClaimYieldCall;

  constructor(call: ClaimYieldCall) {
    this._call = call;
  }
}

export class CompleteOwnershipHandoverCall extends ethereum.Call {
  get inputs(): CompleteOwnershipHandoverCall__Inputs {
    return new CompleteOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): CompleteOwnershipHandoverCall__Outputs {
    return new CompleteOwnershipHandoverCall__Outputs(this);
  }
}

export class CompleteOwnershipHandoverCall__Inputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }

  get pendingOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompleteOwnershipHandoverCall__Outputs {
  _call: CompleteOwnershipHandoverCall;

  constructor(call: CompleteOwnershipHandoverCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _royalty(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _allocation(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _owner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _alignedNft(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get deployment(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployDeterministicCall extends ethereum.Call {
  get inputs(): DeployDeterministicCall__Inputs {
    return new DeployDeterministicCall__Inputs(this);
  }

  get outputs(): DeployDeterministicCall__Outputs {
    return new DeployDeterministicCall__Outputs(this);
  }
}

export class DeployDeterministicCall__Inputs {
  _call: DeployDeterministicCall;

  constructor(call: DeployDeterministicCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _royalty(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _allocation(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _owner(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _alignedNft(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get _salt(): Bytes {
    return this._call.inputValues[11].value.toBytes();
  }
}

export class DeployDeterministicCall__Outputs {
  _call: DeployDeterministicCall;

  constructor(call: DeployDeterministicCall) {
    this._call = call;
  }

  get deployment(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployVaultCall extends ethereum.Call {
  get inputs(): DeployVaultCall__Inputs {
    return new DeployVaultCall__Inputs(this);
  }

  get outputs(): DeployVaultCall__Outputs {
    return new DeployVaultCall__Outputs(this);
  }
}

export class DeployVaultCall__Inputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeployVaultCall__Outputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class OwnershipChangedCall extends ethereum.Call {
  get inputs(): OwnershipChangedCall__Inputs {
    return new OwnershipChangedCall__Inputs(this);
  }

  get outputs(): OwnershipChangedCall__Outputs {
    return new OwnershipChangedCall__Outputs(this);
  }
}

export class OwnershipChangedCall__Inputs {
  _call: OwnershipChangedCall;

  constructor(call: OwnershipChangedCall) {
    this._call = call;
  }

  get _oldOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OwnershipChangedCall__Outputs {
  _call: OwnershipChangedCall;

  constructor(call: OwnershipChangedCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall extends ethereum.Call {
  get inputs(): RequestOwnershipHandoverCall__Inputs {
    return new RequestOwnershipHandoverCall__Inputs(this);
  }

  get outputs(): RequestOwnershipHandoverCall__Outputs {
    return new RequestOwnershipHandoverCall__Outputs(this);
  }
}

export class RequestOwnershipHandoverCall__Inputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RequestOwnershipHandoverCall__Outputs {
  _call: RequestOwnershipHandoverCall;

  constructor(call: RequestOwnershipHandoverCall) {
    this._call = call;
  }
}

export class RescueERC20Call extends ethereum.Call {
  get inputs(): RescueERC20Call__Inputs {
    return new RescueERC20Call__Inputs(this);
  }

  get outputs(): RescueERC20Call__Outputs {
    return new RescueERC20Call__Outputs(this);
  }
}

export class RescueERC20Call__Inputs {
  _call: RescueERC20Call;

  constructor(call: RescueERC20Call) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RescueERC20Call__Outputs {
  _call: RescueERC20Call;

  constructor(call: RescueERC20Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RescueERC721Call extends ethereum.Call {
  get inputs(): RescueERC721Call__Inputs {
    return new RescueERC721Call__Inputs(this);
  }

  get outputs(): RescueERC721Call__Outputs {
    return new RescueERC721Call__Outputs(this);
  }
}

export class RescueERC721Call__Inputs {
  _call: RescueERC721Call;

  constructor(call: RescueERC721Call) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RescueERC721Call__Outputs {
  _call: RescueERC721Call;

  constructor(call: RescueERC721Call) {
    this._call = call;
  }
}

export class SetMiyaIdCall extends ethereum.Call {
  get inputs(): SetMiyaIdCall__Inputs {
    return new SetMiyaIdCall__Inputs(this);
  }

  get outputs(): SetMiyaIdCall__Outputs {
    return new SetMiyaIdCall__Outputs(this);
  }
}

export class SetMiyaIdCall__Inputs {
  _call: SetMiyaIdCall;

  constructor(call: SetMiyaIdCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMiyaIdCall__Outputs {
  _call: SetMiyaIdCall;

  constructor(call: SetMiyaIdCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateERC721MiyaImplementationCall extends ethereum.Call {
  get inputs(): UpdateERC721MiyaImplementationCall__Inputs {
    return new UpdateERC721MiyaImplementationCall__Inputs(this);
  }

  get outputs(): UpdateERC721MiyaImplementationCall__Outputs {
    return new UpdateERC721MiyaImplementationCall__Outputs(this);
  }
}

export class UpdateERC721MiyaImplementationCall__Inputs {
  _call: UpdateERC721MiyaImplementationCall;

  constructor(call: UpdateERC721MiyaImplementationCall) {
    this._call = call;
  }

  get _erc721MiyaImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateERC721MiyaImplementationCall__Outputs {
  _call: UpdateERC721MiyaImplementationCall;

  constructor(call: UpdateERC721MiyaImplementationCall) {
    this._call = call;
  }
}

export class UpdateMiyaAVImplementationCall extends ethereum.Call {
  get inputs(): UpdateMiyaAVImplementationCall__Inputs {
    return new UpdateMiyaAVImplementationCall__Inputs(this);
  }

  get outputs(): UpdateMiyaAVImplementationCall__Outputs {
    return new UpdateMiyaAVImplementationCall__Outputs(this);
  }
}

export class UpdateMiyaAVImplementationCall__Inputs {
  _call: UpdateMiyaAVImplementationCall;

  constructor(call: UpdateMiyaAVImplementationCall) {
    this._call = call;
  }

  get _miyaAVImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateMiyaAVImplementationCall__Outputs {
  _call: UpdateMiyaAVImplementationCall;

  constructor(call: UpdateMiyaAVImplementationCall) {
    this._call = call;
  }
}

export class WithdrawNftsCall extends ethereum.Call {
  get inputs(): WithdrawNftsCall__Inputs {
    return new WithdrawNftsCall__Inputs(this);
  }

  get outputs(): WithdrawNftsCall__Outputs {
    return new WithdrawNftsCall__Outputs(this);
  }
}

export class WithdrawNftsCall__Inputs {
  _call: WithdrawNftsCall;

  constructor(call: WithdrawNftsCall) {
    this._call = call;
  }

  get _erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawNftsCall__Outputs {
  _call: WithdrawNftsCall;

  constructor(call: WithdrawNftsCall) {
    this._call = call;
  }
}

export class WithdrawNfts1Call extends ethereum.Call {
  get inputs(): WithdrawNfts1Call__Inputs {
    return new WithdrawNfts1Call__Inputs(this);
  }

  get outputs(): WithdrawNfts1Call__Outputs {
    return new WithdrawNfts1Call__Outputs(this);
  }
}

export class WithdrawNfts1Call__Inputs {
  _call: WithdrawNfts1Call;

  constructor(call: WithdrawNfts1Call) {
    this._call = call;
  }

  get _erc721(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tokenIds(): Array<Array<BigInt>> {
    return this._call.inputValues[1].value.toBigIntMatrix();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawNfts1Call__Outputs {
  _call: WithdrawNfts1Call;

  constructor(call: WithdrawNfts1Call) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _erc20(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

export class WithdrawTokens1Call extends ethereum.Call {
  get inputs(): WithdrawTokens1Call__Inputs {
    return new WithdrawTokens1Call__Inputs(this);
  }

  get outputs(): WithdrawTokens1Call__Outputs {
    return new WithdrawTokens1Call__Outputs(this);
  }
}

export class WithdrawTokens1Call__Inputs {
  _call: WithdrawTokens1Call;

  constructor(call: WithdrawTokens1Call) {
    this._call = call;
  }

  get _erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawTokens1Call__Outputs {
  _call: WithdrawTokens1Call;

  constructor(call: WithdrawTokens1Call) {
    this._call = call;
  }
}
